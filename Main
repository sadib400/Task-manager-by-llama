import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "/components/ui/card";
import { Button } from "/components/ui/button";
import { Input } from "/components/ui/input";
import { Label } from "/components/ui/label";
import { Textarea } from "/components/ui/textarea";

interface Task {
  id: number;
  title: string;
  description: string;
  completed: boolean;
  subTasks: Task[];
}

const TaskManager = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskDescription, setNewTaskDescription] = useState('');
  const [synced, setSynced] = useState(false);

  useEffect(() => {
    const storedTasks = localStorage.getItem('tasks');
    if (storedTasks) {
      setTasks(JSON.parse(storedTasks));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  const addTask = () => {
    const newTask: Task = {
      id: tasks.length + 1,
      title: newTaskTitle,
      description: newTaskDescription,
      completed: false,
      subTasks: [],
    };
    setTasks([...tasks, newTask]);
    setNewTaskTitle('');
    setNewTaskDescription('');
  };

  const addSubTask = (taskId: number) => {
    const task = tasks.find((t) => t.id === taskId);
    if (task) {
      const newSubTask: Task = {
        id: task.subTasks.length + 1,
        title: newTaskTitle,
        description: newTaskDescription,
        completed: false,
        subTasks: [],
      };
      task.subTasks.push(newSubTask);
      setTasks([...tasks]);
      setNewTaskTitle('');
      setNewTaskDescription('');
    }
  };

  const completeTask = (taskId: number) => {
    const task = tasks.find((t) => t.id === taskId);
    if (task) {
      task.completed = true;
      setTasks([...tasks]);
    }
  };

  const syncWithGoogle = () => {
    // Google API Client Library is not installed, so we can't use it
    // Instead, we'll just simulate the sync process
    setSynced(true);
  };

  return (
    <div className="max-w-3xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Task Manager</CardTitle>
          <CardDescription>Manage your tasks and sync with Google Calendar</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col space-y-4">
            <div className="flex flex-row space-x-2">
              <Input value={newTaskTitle} onChange={(e) => setNewTaskTitle(e.target.value)} placeholder="Task title" />
              <Input value={newTaskDescription} onChange={(e) => setNewTaskDescription(e.target.value)} placeholder="Task description" />
              <Button onClick={addTask}>Add Task</Button>
            </div>
            {tasks.map((task) => (
              <div key={task.id} className="flex flex-col space-y-2">
                <div className="flex flex-row space-x-2">
                  <Label>{task.title}</Label>
                  <Button onClick={() => completeTask(task.id)}>Complete</Button>
                  <Button onClick={() => addSubTask(task.id)}>Add Subtask</Button>
                </div>
                {task.subTasks.map((subTask) => (
                  <div key={subTask.id} className="flex flex-row space-x-2">
                    <Label>{subTask.title}</Label>
                    <Button onClick={() => completeTask(subTask.id)}>Complete</Button>
                  </div>
                ))}
              </div>
            ))}
          </div>
        </CardContent>
        <CardFooter>
          <Button onClick={syncWithGoogle}>Sync with Google</Button>
          {synced && <p>Synced with Google</p>}
        </CardFooter>
      </Card>
    </div>
  );
};

export default TaskManager;
